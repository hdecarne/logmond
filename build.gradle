// Plugins
plugins {
	id "java-library"
	id "jacoco"
	id "eclipse"
	id "de.carne.java-tools" version "0.9.0"
	id "org.sonarqube" version "2.8"
}
// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")

def resolveProperty(propertyName, envName, defValue = "<undefined>") {
	return ((project.findProperty(propertyName) ?: System.getenv(envName)) ?: defValue);
}

// Project
defaultTasks "classes", "testClasses"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
	if(snapshotBuild) {
		mavenLocal()
		maven { url "https://oss.jfrog.org/libs-snapshot/" }
	}
	jcenter()
	maven { url "https://oss.jfrog.org/libs-release/" }
}

dependencies {
	compileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	testCompileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	implementation(group: "de.carne.common", name: "java-lwjsd-api", version: project.javaLwjsdVersion)
	implementation(group: "de.carne.common", name: "java-test", version: project.javaTestVersion)
	testImplementation(group: "de.carne.common", name: "java-lwjsd-runtime", version: project.javaLwjsdVersion)
}

test {
	useJUnitPlatform()
	testLogging {
		events "started", "failed", "passed", "skipped"
		exceptionFormat "full"
	}
}

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
		html.enabled false
		csv.enabled false
	}
}
test.finalizedBy jacocoTestReport

sonarqube {
	properties {
		property 'sonar.coverage.jacoco.xmlReportPaths', jacocoTestReport.reports.xml.destination
	}
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged {
				def eeaPath = project.findProperty("eclipse.eeaPath");
				 
				entries.forEach {
					if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/caches/modules-2/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					}
				}
			}
		}
	}
}
